// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: token_contract_impl.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.MultiToken {

  /// <summary>Holder for reflection information generated from token_contract_impl.proto</summary>
  public static partial class TokenContractImplReflection {

    #region Descriptor
    /// <summary>File descriptor for token_contract_impl.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TokenContractImplReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chl0b2tlbl9jb250cmFjdF9pbXBsLnByb3RvEgl0b2tlbmltcGwaD2FlbGYv",
            "Y29yZS5wcm90bxoKYWNzMS5wcm90bxoKYWNzMi5wcm90bxoUdG9rZW5fY29u",
            "dHJhY3QucHJvdG8aFXRyYW5zYWN0aW9uX2ZlZS5wcm90bxoUYXV0aG9yaXR5",
            "X2luZm8ucHJvdG8icwoZQWR2YW5jZVJlc291cmNlVG9rZW5JbnB1dBInChBj",
            "b250cmFjdF9hZGRyZXNzGAEgASgLMg0uYWVsZi5BZGRyZXNzEh0KFXJlc291",
            "cmNlX3Rva2VuX3N5bWJvbBgCIAEoCRIOCgZhbW91bnQYAyABKAMidAoaVGFr",
            "ZVJlc291cmNlVG9rZW5CYWNrSW5wdXQSJwoQY29udHJhY3RfYWRkcmVzcxgB",
            "IAEoCzINLmFlbGYuQWRkcmVzcxIdChVyZXNvdXJjZV90b2tlbl9zeW1ib2wY",
            "AiABKAkSDgoGYW1vdW50GAMgASgDItIBCitSZWdpc3RlckNyb3NzQ2hhaW5U",
            "b2tlbkNvbnRyYWN0QWRkcmVzc0lucHV0EhUKDWZyb21fY2hhaW5faWQYASAB",
            "KAUSGwoTcGFyZW50X2NoYWluX2hlaWdodBgCIAEoAxIZChF0cmFuc2FjdGlv",
            "bl9ieXRlcxgDIAEoDBIlCgttZXJrbGVfcGF0aBgEIAEoCzIQLmFlbGYuTWVy",
            "a2xlUGF0aBItChZ0b2tlbl9jb250cmFjdF9hZGRyZXNzGAUgASgLMg0uYWVs",
            "Zi5BZGRyZXNzIr0CChxWYWxpZGF0ZVRva2VuSW5mb0V4aXN0c0lucHV0Eg4K",
            "BnN5bWJvbBgBIAEoCRISCgp0b2tlbl9uYW1lGAIgASgJEhQKDHRvdGFsX3N1",
            "cHBseRgDIAEoAxIQCghkZWNpbWFscxgEIAEoBRIdCgZpc3N1ZXIYBSABKAsy",
            "DS5hZWxmLkFkZHJlc3MSEwoLaXNfYnVybmFibGUYBiABKAgSFgoOaXNzdWVf",
            "Y2hhaW5faWQYByABKAUSUAoNZXh0ZXJuYWxfaW5mbxgIIAMoCzI5LnRva2Vu",
            "aW1wbC5WYWxpZGF0ZVRva2VuSW5mb0V4aXN0c0lucHV0LkV4dGVybmFsSW5m",
            "b0VudHJ5GjMKEUV4dGVybmFsSW5mb0VudHJ5EgsKA2tleRgBIAEoCRINCgV2",
            "YWx1ZRgCIAEoCToCOAEifAoRVXBkYXRlUmVudGFsSW5wdXQSOAoGcmVudGFs",
            "GAEgAygLMigudG9rZW5pbXBsLlVwZGF0ZVJlbnRhbElucHV0LlJlbnRhbEVu",
            "dHJ5Gi0KC1JlbnRhbEVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEo",
            "AzoCOAEipwEKGlVwZGF0ZVJlbnRlZFJlc291cmNlc0lucHV0ElIKD3Jlc291",
            "cmNlX2Ftb3VudBgBIAMoCzI5LnRva2VuaW1wbC5VcGRhdGVSZW50ZWRSZXNv",
            "dXJjZXNJbnB1dC5SZXNvdXJjZUFtb3VudEVudHJ5GjUKE1Jlc291cmNlQW1v",
            "dW50RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgFOgI4ASJxCg1S",
            "ZXNvdXJjZVVzYWdlEjIKBXZhbHVlGAEgAygLMiMudG9rZW5pbXBsLlJlc291",
            "cmNlVXNhZ2UuVmFsdWVFbnRyeRosCgpWYWx1ZUVudHJ5EgsKA2tleRgBIAEo",
            "CRINCgV2YWx1ZRgCIAEoBToCOAEiXwogR2V0VmlydHVhbEFkZHJlc3NGb3JM",
            "b2NraW5nSW5wdXQSHgoHYWRkcmVzcxgBIAEoCzINLmFlbGYuQWRkcmVzcxIb",
            "Cgdsb2NrX2lkGAIgASgLMgouYWVsZi5IYXNoIosBCgxPd25pbmdSZW50YWwS",
            "RAoPcmVzb3VyY2VfYW1vdW50GAEgAygLMisudG9rZW5pbXBsLk93bmluZ1Jl",
            "bnRhbC5SZXNvdXJjZUFtb3VudEVudHJ5GjUKE1Jlc291cmNlQW1vdW50RW50",
            "cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgDOgI4ASKnAQoVT3duaW5n",
            "UmVudGFsVW5pdFZhbHVlElQKE3Jlc291cmNlX3VuaXRfdmFsdWUYASADKAsy",
            "Ny50b2tlbmltcGwuT3duaW5nUmVudGFsVW5pdFZhbHVlLlJlc291cmNlVW5p",
            "dFZhbHVlRW50cnkaOAoWUmVzb3VyY2VVbml0VmFsdWVFbnRyeRILCgNrZXkY",
            "ASABKAkSDQoFdmFsdWUYAiABKAM6AjgBIkcKF1RyYW5zZmVyVG9Db250cmFj",
            "dElucHV0Eg4KBnN5bWJvbBgBIAEoCRIOCgZhbW91bnQYAiABKAMSDAoEbWVt",
            "bxgDIAEoCSKaAQoRVXNlckZlZUNvbnRyb2xsZXISJwoPcm9vdF9jb250cm9s",
            "bGVyGAEgASgLMg4uQXV0aG9yaXR5SW5mbxItChVwYXJsaWFtZW50X2NvbnRy",
            "b2xsZXIYAiABKAsyDi5BdXRob3JpdHlJbmZvEi0KFXJlZmVyZW5kdW1fY29u",
            "dHJvbGxlchgDIAEoCzIOLkF1dGhvcml0eUluZm8ingEKFkRldmVsb3BlckZl",
            "ZUNvbnRyb2xsZXISJwoPcm9vdF9jb250cm9sbGVyGAEgASgLMg4uQXV0aG9y",
            "aXR5SW5mbxItChVwYXJsaWFtZW50X2NvbnRyb2xsZXIYAiABKAsyDi5BdXRo",
            "b3JpdHlJbmZvEiwKFGRldmVsb3Blcl9jb250cm9sbGVyGAMgASgLMg4uQXV0",
            "aG9yaXR5SW5mbzKjEAoRVG9rZW5Db250cmFjdEltcGwSVgoUQWR2YW5jZVJl",
            "c291cmNlVG9rZW4SJC50b2tlbmltcGwuQWR2YW5jZVJlc291cmNlVG9rZW5J",
            "bnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAElgKFVRha2VSZXNvdXJj",
            "ZVRva2VuQmFjaxIlLnRva2VuaW1wbC5UYWtlUmVzb3VyY2VUb2tlbkJhY2tJ",
            "bnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEnoKJlJlZ2lzdGVyQ3Jv",
            "c3NDaGFpblRva2VuQ29udHJhY3RBZGRyZXNzEjYudG9rZW5pbXBsLlJlZ2lz",
            "dGVyQ3Jvc3NDaGFpblRva2VuQ29udHJhY3RBZGRyZXNzSW5wdXQaFi5nb29n",
            "bGUucHJvdG9idWYuRW1wdHkiABI5Cg5TZXRGZWVSZWNlaXZlchINLmFlbGYu",
            "QWRkcmVzcxoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAElwKF1ZhbGlkYXRl",
            "VG9rZW5JbmZvRXhpc3RzEicudG9rZW5pbXBsLlZhbGlkYXRlVG9rZW5JbmZv",
            "RXhpc3RzSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJGCgxVcGRh",
            "dGVSZW50YWwSHC50b2tlbmltcGwuVXBkYXRlUmVudGFsSW5wdXQaFi5nb29n",
            "bGUucHJvdG9idWYuRW1wdHkiABJYChVVcGRhdGVSZW50ZWRSZXNvdXJjZXMS",
            "JS50b2tlbmltcGwuVXBkYXRlUmVudGVkUmVzb3VyY2VzSW5wdXQaFi5nb29n",
            "bGUucHJvdG9idWYuRW1wdHkiABJSChJUcmFuc2ZlclRvQ29udHJhY3QSIi50",
            "b2tlbmltcGwuVHJhbnNmZXJUb0NvbnRyYWN0SW5wdXQaFi5nb29nbGUucHJv",
            "dG9idWYuRW1wdHkiABJLCh9DaGFuZ2VTaWRlQ2hhaW5SZW50YWxDb250cm9s",
            "bGVyEg4uQXV0aG9yaXR5SW5mbxoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIA",
            "ElEKJUNoYW5nZVN5bWJvbHNUb1BheVRYU2l6ZUZlZUNvbnRyb2xsZXISDi5B",
            "dXRob3JpdHlJbmZvGhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASXwozQ2hh",
            "bmdlQ3Jvc3NDaGFpblRva2VuQ29udHJhY3RSZWdpc3RyYXRpb25Db250cm9s",
            "bGVyEg4uQXV0aG9yaXR5SW5mbxoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIA",
            "EkMKF0NoYW5nZVVzZXJGZWVDb250cm9sbGVyEg4uQXV0aG9yaXR5SW5mbxoW",
            "Lmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEkUKGUNoYW5nZURldmVsb3BlckNv",
            "bnRyb2xsZXISDi5BdXRob3JpdHlJbmZvGhYuZ29vZ2xlLnByb3RvYnVmLkVt",
            "cHR5IgASPgoOR2V0RmVlUmVjZWl2ZXISFi5nb29nbGUucHJvdG9idWYuRW1w",
            "dHkaDS5hZWxmLkFkZHJlc3MiBYiJ9wEBEksKEEdldFJlc291cmNlVXNhZ2US",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkaGC50b2tlbmltcGwuUmVzb3VyY2VV",
            "c2FnZSIFiIn3AQESUwoiR2V0U3ltYm9sc1RvUGF5VFhTaXplRmVlQ29udHJv",
            "bGxlchIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoOLkF1dGhvcml0eUluZm8i",
            "BYiJ9wEBEmEKMEdldENyb3NzQ2hhaW5Ub2tlbkNvbnRyYWN0UmVnaXN0cmF0",
            "aW9uQ29udHJvbGxlchIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoOLkF1dGhv",
            "cml0eUluZm8iBYiJ9wEBElMKFEdldFVzZXJGZWVDb250cm9sbGVyEhYuZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5GhwudG9rZW5pbXBsLlVzZXJGZWVDb250cm9s",
            "bGVyIgWIifcBARJdChlHZXREZXZlbG9wZXJGZWVDb250cm9sbGVyEhYuZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5GiEudG9rZW5pbXBsLkRldmVsb3BlckZlZUNv",
            "bnRyb2xsZXIiBYiJ9wEBElcKJkdldFNpZGVDaGFpblJlbnRhbENvbnRyb2xs",
            "ZXJDcmVhdGVJbmZvEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5Gg4uQXV0aG9y",
            "aXR5SW5mbyIFiIn3AQESYAobR2V0VmlydHVhbEFkZHJlc3NGb3JMb2NraW5n",
            "EisudG9rZW5pbXBsLkdldFZpcnR1YWxBZGRyZXNzRm9yTG9ja2luZ0lucHV0",
            "Gg0uYWVsZi5BZGRyZXNzIgWIifcBARJJCg9HZXRPd25pbmdSZW50YWwSFi5n",
            "b29nbGUucHJvdG9idWYuRW1wdHkaFy50b2tlbmltcGwuT3duaW5nUmVudGFs",
            "IgWIifcBARJbChhHZXRPd25pbmdSZW50YWxVbml0VmFsdWUSFi5nb29nbGUu",
            "cHJvdG9idWYuRW1wdHkaIC50b2tlbmltcGwuT3duaW5nUmVudGFsVW5pdFZh",
            "bHVlIgWIifcBARpossz2ASxBRWxmLkNvbnRyYWN0cy5NdWx0aVRva2VuLlRv",
            "a2VuQ29udHJhY3RTdGF0ZcrK9gEKYWNzMS5wcm90b8rK9gEKYWNzMi5wcm90",
            "b8rK9gEUdG9rZW5fY29udHJhY3QucHJvdG9CHKoCGUFFbGYuQ29udHJhY3Rz",
            "Lk11bHRpVG9rZW5iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Types.CoreReflection.Descriptor, global::AElf.Contracts.MultiToken.TokenContractReflection.Descriptor },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.AdvanceResourceTokenInput), global::AElf.Contracts.MultiToken.AdvanceResourceTokenInput.Parser, new[]{ "ContractAddress", "ResourceTokenSymbol", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TakeResourceTokenBackInput), global::AElf.Contracts.MultiToken.TakeResourceTokenBackInput.Parser, new[]{ "ContractAddress", "ResourceTokenSymbol", "Amount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.RegisterCrossChainTokenContractAddressInput), global::AElf.Contracts.MultiToken.RegisterCrossChainTokenContractAddressInput.Parser, new[]{ "FromChainId", "ParentChainHeight", "TransactionBytes", "MerklePath", "TokenContractAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ValidateTokenInfoExistsInput), global::AElf.Contracts.MultiToken.ValidateTokenInfoExistsInput.Parser, new[]{ "Symbol", "TokenName", "TotalSupply", "Decimals", "Issuer", "IsBurnable", "IssueChainId", "ExternalInfo" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.UpdateRentalInput), global::AElf.Contracts.MultiToken.UpdateRentalInput.Parser, new[]{ "Rental" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.UpdateRentedResourcesInput), global::AElf.Contracts.MultiToken.UpdateRentedResourcesInput.Parser, new[]{ "ResourceAmount" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.ResourceUsage), global::AElf.Contracts.MultiToken.ResourceUsage.Parser, new[]{ "Value" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.GetVirtualAddressForLockingInput), global::AElf.Contracts.MultiToken.GetVirtualAddressForLockingInput.Parser, new[]{ "Address", "LockId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.OwningRental), global::AElf.Contracts.MultiToken.OwningRental.Parser, new[]{ "ResourceAmount" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.OwningRentalUnitValue), global::AElf.Contracts.MultiToken.OwningRentalUnitValue.Parser, new[]{ "ResourceUnitValue" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.TransferToContractInput), global::AElf.Contracts.MultiToken.TransferToContractInput.Parser, new[]{ "Symbol", "Amount", "Memo" }, null, null, null, null),
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AdvanceResourceTokenInput : pb::IMessage<AdvanceResourceTokenInput> {
    private static readonly pb::MessageParser<AdvanceResourceTokenInput> _parser = new pb::MessageParser<AdvanceResourceTokenInput>(() => new AdvanceResourceTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdvanceResourceTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractImplReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvanceResourceTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvanceResourceTokenInput(AdvanceResourceTokenInput other) : this() {
      contractAddress_ = other.contractAddress_ != null ? other.contractAddress_.Clone() : null;
      resourceTokenSymbol_ = other.resourceTokenSymbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvanceResourceTokenInput Clone() {
      return new AdvanceResourceTokenInput(this);
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 1;
    private global::AElf.Types.Address contractAddress_;
    /// <summary>
    /// The contract address to transfer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = value;
      }
    }

    /// <summary>Field number for the "resource_token_symbol" field.</summary>
    public const int ResourceTokenSymbolFieldNumber = 2;
    private string resourceTokenSymbol_ = "";
    /// <summary>
    /// The resource token symbol to transfer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceTokenSymbol {
      get { return resourceTokenSymbol_; }
      set {
        resourceTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    /// <summary>
    /// The amount of resource token to transfer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdvanceResourceTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdvanceResourceTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContractAddress, other.ContractAddress)) return false;
      if (ResourceTokenSymbol != other.ResourceTokenSymbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contractAddress_ != null) hash ^= ContractAddress.GetHashCode();
      if (ResourceTokenSymbol.Length != 0) hash ^= ResourceTokenSymbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contractAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractAddress);
      }
      if (ResourceTokenSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ResourceTokenSymbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractAddress);
      }
      if (ResourceTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceTokenSymbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdvanceResourceTokenInput other) {
      if (other == null) {
        return;
      }
      if (other.contractAddress_ != null) {
        if (contractAddress_ == null) {
          ContractAddress = new global::AElf.Types.Address();
        }
        ContractAddress.MergeFrom(other.ContractAddress);
      }
      if (other.ResourceTokenSymbol.Length != 0) {
        ResourceTokenSymbol = other.ResourceTokenSymbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (contractAddress_ == null) {
              ContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ContractAddress);
            break;
          }
          case 18: {
            ResourceTokenSymbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TakeResourceTokenBackInput : pb::IMessage<TakeResourceTokenBackInput> {
    private static readonly pb::MessageParser<TakeResourceTokenBackInput> _parser = new pb::MessageParser<TakeResourceTokenBackInput>(() => new TakeResourceTokenBackInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeResourceTokenBackInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractImplReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeResourceTokenBackInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeResourceTokenBackInput(TakeResourceTokenBackInput other) : this() {
      contractAddress_ = other.contractAddress_ != null ? other.contractAddress_.Clone() : null;
      resourceTokenSymbol_ = other.resourceTokenSymbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeResourceTokenBackInput Clone() {
      return new TakeResourceTokenBackInput(this);
    }

    /// <summary>Field number for the "contract_address" field.</summary>
    public const int ContractAddressFieldNumber = 1;
    private global::AElf.Types.Address contractAddress_;
    /// <summary>
    /// The contract address to take back.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address ContractAddress {
      get { return contractAddress_; }
      set {
        contractAddress_ = value;
      }
    }

    /// <summary>Field number for the "resource_token_symbol" field.</summary>
    public const int ResourceTokenSymbolFieldNumber = 2;
    private string resourceTokenSymbol_ = "";
    /// <summary>
    /// The resource token symbol to take back.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResourceTokenSymbol {
      get { return resourceTokenSymbol_; }
      set {
        resourceTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    /// <summary>
    /// The amount of resource token to take back.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeResourceTokenBackInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeResourceTokenBackInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ContractAddress, other.ContractAddress)) return false;
      if (ResourceTokenSymbol != other.ResourceTokenSymbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (contractAddress_ != null) hash ^= ContractAddress.GetHashCode();
      if (ResourceTokenSymbol.Length != 0) hash ^= ResourceTokenSymbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (contractAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ContractAddress);
      }
      if (ResourceTokenSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ResourceTokenSymbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (contractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContractAddress);
      }
      if (ResourceTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceTokenSymbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeResourceTokenBackInput other) {
      if (other == null) {
        return;
      }
      if (other.contractAddress_ != null) {
        if (contractAddress_ == null) {
          ContractAddress = new global::AElf.Types.Address();
        }
        ContractAddress.MergeFrom(other.ContractAddress);
      }
      if (other.ResourceTokenSymbol.Length != 0) {
        ResourceTokenSymbol = other.ResourceTokenSymbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (contractAddress_ == null) {
              ContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(ContractAddress);
            break;
          }
          case 18: {
            ResourceTokenSymbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterCrossChainTokenContractAddressInput : pb::IMessage<RegisterCrossChainTokenContractAddressInput> {
    private static readonly pb::MessageParser<RegisterCrossChainTokenContractAddressInput> _parser = new pb::MessageParser<RegisterCrossChainTokenContractAddressInput>(() => new RegisterCrossChainTokenContractAddressInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterCrossChainTokenContractAddressInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractImplReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterCrossChainTokenContractAddressInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterCrossChainTokenContractAddressInput(RegisterCrossChainTokenContractAddressInput other) : this() {
      fromChainId_ = other.fromChainId_;
      parentChainHeight_ = other.parentChainHeight_;
      transactionBytes_ = other.transactionBytes_;
      merklePath_ = other.merklePath_ != null ? other.merklePath_.Clone() : null;
      tokenContractAddress_ = other.tokenContractAddress_ != null ? other.tokenContractAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterCrossChainTokenContractAddressInput Clone() {
      return new RegisterCrossChainTokenContractAddressInput(this);
    }

    /// <summary>Field number for the "from_chain_id" field.</summary>
    public const int FromChainIdFieldNumber = 1;
    private int fromChainId_;
    /// <summary>
    /// The source chain id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromChainId {
      get { return fromChainId_; }
      set {
        fromChainId_ = value;
      }
    }

    /// <summary>Field number for the "parent_chain_height" field.</summary>
    public const int ParentChainHeightFieldNumber = 2;
    private long parentChainHeight_;
    /// <summary>
    /// The parent chain height of the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentChainHeight {
      get { return parentChainHeight_; }
      set {
        parentChainHeight_ = value;
      }
    }

    /// <summary>Field number for the "transaction_bytes" field.</summary>
    public const int TransactionBytesFieldNumber = 3;
    private pb::ByteString transactionBytes_ = pb::ByteString.Empty;
    /// <summary>
    /// The raw bytes of the transfer transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransactionBytes {
      get { return transactionBytes_; }
      set {
        transactionBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "merkle_path" field.</summary>
    public const int MerklePathFieldNumber = 4;
    private global::AElf.Types.MerklePath merklePath_;
    /// <summary>
    /// The merkle path created from the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.MerklePath MerklePath {
      get { return merklePath_; }
      set {
        merklePath_ = value;
      }
    }

    /// <summary>Field number for the "token_contract_address" field.</summary>
    public const int TokenContractAddressFieldNumber = 5;
    private global::AElf.Types.Address tokenContractAddress_;
    /// <summary>
    /// The token contract address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address TokenContractAddress {
      get { return tokenContractAddress_; }
      set {
        tokenContractAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterCrossChainTokenContractAddressInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterCrossChainTokenContractAddressInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromChainId != other.FromChainId) return false;
      if (ParentChainHeight != other.ParentChainHeight) return false;
      if (TransactionBytes != other.TransactionBytes) return false;
      if (!object.Equals(MerklePath, other.MerklePath)) return false;
      if (!object.Equals(TokenContractAddress, other.TokenContractAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromChainId != 0) hash ^= FromChainId.GetHashCode();
      if (ParentChainHeight != 0L) hash ^= ParentChainHeight.GetHashCode();
      if (TransactionBytes.Length != 0) hash ^= TransactionBytes.GetHashCode();
      if (merklePath_ != null) hash ^= MerklePath.GetHashCode();
      if (tokenContractAddress_ != null) hash ^= TokenContractAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromChainId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FromChainId);
      }
      if (ParentChainHeight != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ParentChainHeight);
      }
      if (TransactionBytes.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TransactionBytes);
      }
      if (merklePath_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MerklePath);
      }
      if (tokenContractAddress_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TokenContractAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromChainId);
      }
      if (ParentChainHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentChainHeight);
      }
      if (TransactionBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransactionBytes);
      }
      if (merklePath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MerklePath);
      }
      if (tokenContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenContractAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterCrossChainTokenContractAddressInput other) {
      if (other == null) {
        return;
      }
      if (other.FromChainId != 0) {
        FromChainId = other.FromChainId;
      }
      if (other.ParentChainHeight != 0L) {
        ParentChainHeight = other.ParentChainHeight;
      }
      if (other.TransactionBytes.Length != 0) {
        TransactionBytes = other.TransactionBytes;
      }
      if (other.merklePath_ != null) {
        if (merklePath_ == null) {
          MerklePath = new global::AElf.Types.MerklePath();
        }
        MerklePath.MergeFrom(other.MerklePath);
      }
      if (other.tokenContractAddress_ != null) {
        if (tokenContractAddress_ == null) {
          TokenContractAddress = new global::AElf.Types.Address();
        }
        TokenContractAddress.MergeFrom(other.TokenContractAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FromChainId = input.ReadInt32();
            break;
          }
          case 16: {
            ParentChainHeight = input.ReadInt64();
            break;
          }
          case 26: {
            TransactionBytes = input.ReadBytes();
            break;
          }
          case 34: {
            if (merklePath_ == null) {
              MerklePath = new global::AElf.Types.MerklePath();
            }
            input.ReadMessage(MerklePath);
            break;
          }
          case 42: {
            if (tokenContractAddress_ == null) {
              TokenContractAddress = new global::AElf.Types.Address();
            }
            input.ReadMessage(TokenContractAddress);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ValidateTokenInfoExistsInput : pb::IMessage<ValidateTokenInfoExistsInput> {
    private static readonly pb::MessageParser<ValidateTokenInfoExistsInput> _parser = new pb::MessageParser<ValidateTokenInfoExistsInput>(() => new ValidateTokenInfoExistsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValidateTokenInfoExistsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractImplReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateTokenInfoExistsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateTokenInfoExistsInput(ValidateTokenInfoExistsInput other) : this() {
      symbol_ = other.symbol_;
      tokenName_ = other.tokenName_;
      totalSupply_ = other.totalSupply_;
      decimals_ = other.decimals_;
      issuer_ = other.issuer_ != null ? other.issuer_.Clone() : null;
      isBurnable_ = other.isBurnable_;
      issueChainId_ = other.issueChainId_;
      externalInfo_ = other.externalInfo_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateTokenInfoExistsInput Clone() {
      return new ValidateTokenInfoExistsInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token_name" field.</summary>
    public const int TokenNameFieldNumber = 2;
    private string tokenName_ = "";
    /// <summary>
    /// The full name of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenName {
      get { return tokenName_; }
      set {
        tokenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_supply" field.</summary>
    public const int TotalSupplyFieldNumber = 3;
    private long totalSupply_;
    /// <summary>
    /// The total supply of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 4;
    private int decimals_;
    /// <summary>
    /// The precision of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 5;
    private global::AElf.Types.Address issuer_;
    /// <summary>
    /// The address that created the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    /// <summary>Field number for the "is_burnable" field.</summary>
    public const int IsBurnableFieldNumber = 6;
    private bool isBurnable_;
    /// <summary>
    /// A flag indicating if this token is burnable.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBurnable {
      get { return isBurnable_; }
      set {
        isBurnable_ = value;
      }
    }

    /// <summary>Field number for the "issue_chain_id" field.</summary>
    public const int IssueChainIdFieldNumber = 7;
    private int issueChainId_;
    /// <summary>
    /// The chain id of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IssueChainId {
      get { return issueChainId_; }
      set {
        issueChainId_ = value;
      }
    }

    /// <summary>Field number for the "external_info" field.</summary>
    public const int ExternalInfoFieldNumber = 8;
    private static readonly pbc::MapField<string, string>.Codec _map_externalInfo_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 66);
    private readonly pbc::MapField<string, string> externalInfo_ = new pbc::MapField<string, string>();
    /// <summary>
    /// The external information of the token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> ExternalInfo {
      get { return externalInfo_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValidateTokenInfoExistsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValidateTokenInfoExistsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (TokenName != other.TokenName) return false;
      if (TotalSupply != other.TotalSupply) return false;
      if (Decimals != other.Decimals) return false;
      if (!object.Equals(Issuer, other.Issuer)) return false;
      if (IsBurnable != other.IsBurnable) return false;
      if (IssueChainId != other.IssueChainId) return false;
      if (!ExternalInfo.Equals(other.ExternalInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TokenName.Length != 0) hash ^= TokenName.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (issuer_ != null) hash ^= Issuer.GetHashCode();
      if (IsBurnable != false) hash ^= IsBurnable.GetHashCode();
      if (IssueChainId != 0) hash ^= IssueChainId.GetHashCode();
      hash ^= ExternalInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (TokenName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenName);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalSupply);
      }
      if (Decimals != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Decimals);
      }
      if (issuer_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Issuer);
      }
      if (IsBurnable != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsBurnable);
      }
      if (IssueChainId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(IssueChainId);
      }
      externalInfo_.WriteTo(output, _map_externalInfo_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TokenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenName);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSupply);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Decimals);
      }
      if (issuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Issuer);
      }
      if (IsBurnable != false) {
        size += 1 + 1;
      }
      if (IssueChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IssueChainId);
      }
      size += externalInfo_.CalculateSize(_map_externalInfo_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValidateTokenInfoExistsInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TokenName.Length != 0) {
        TokenName = other.TokenName;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.issuer_ != null) {
        if (issuer_ == null) {
          Issuer = new global::AElf.Types.Address();
        }
        Issuer.MergeFrom(other.Issuer);
      }
      if (other.IsBurnable != false) {
        IsBurnable = other.IsBurnable;
      }
      if (other.IssueChainId != 0) {
        IssueChainId = other.IssueChainId;
      }
      externalInfo_.Add(other.externalInfo_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            TokenName = input.ReadString();
            break;
          }
          case 24: {
            TotalSupply = input.ReadInt64();
            break;
          }
          case 32: {
            Decimals = input.ReadInt32();
            break;
          }
          case 42: {
            if (issuer_ == null) {
              Issuer = new global::AElf.Types.Address();
            }
            input.ReadMessage(Issuer);
            break;
          }
          case 48: {
            IsBurnable = input.ReadBool();
            break;
          }
          case 56: {
            IssueChainId = input.ReadInt32();
            break;
          }
          case 66: {
            externalInfo_.AddEntriesFrom(input, _map_externalInfo_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateRentalInput : pb::IMessage<UpdateRentalInput> {
    private static readonly pb::MessageParser<UpdateRentalInput> _parser = new pb::MessageParser<UpdateRentalInput>(() => new UpdateRentalInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateRentalInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractImplReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRentalInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRentalInput(UpdateRentalInput other) : this() {
      rental_ = other.rental_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRentalInput Clone() {
      return new UpdateRentalInput(this);
    }

    /// <summary>Field number for the "rental" field.</summary>
    public const int RentalFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_rental_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<string, long> rental_ = new pbc::MapField<string, long>();
    /// <summary>
    /// The unit price of resource tokens, symbol -> unit price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> Rental {
      get { return rental_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateRentalInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateRentalInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Rental.Equals(other.Rental)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Rental.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rental_.WriteTo(output, _map_rental_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rental_.CalculateSize(_map_rental_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateRentalInput other) {
      if (other == null) {
        return;
      }
      rental_.Add(other.rental_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rental_.AddEntriesFrom(input, _map_rental_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateRentedResourcesInput : pb::IMessage<UpdateRentedResourcesInput> {
    private static readonly pb::MessageParser<UpdateRentedResourcesInput> _parser = new pb::MessageParser<UpdateRentedResourcesInput>(() => new UpdateRentedResourcesInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateRentedResourcesInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractImplReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRentedResourcesInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRentedResourcesInput(UpdateRentedResourcesInput other) : this() {
      resourceAmount_ = other.resourceAmount_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRentedResourcesInput Clone() {
      return new UpdateRentedResourcesInput(this);
    }

    /// <summary>Field number for the "resource_amount" field.</summary>
    public const int ResourceAmountFieldNumber = 1;
    private static readonly pbc::MapField<string, int>.Codec _map_resourceAmount_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt32(16, 0), 10);
    private readonly pbc::MapField<string, int> resourceAmount_ = new pbc::MapField<string, int>();
    /// <summary>
    /// Amount of resource tokens consumed per minute, symbol -> resource consumption.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> ResourceAmount {
      get { return resourceAmount_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateRentedResourcesInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateRentedResourcesInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ResourceAmount.Equals(other.ResourceAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ResourceAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      resourceAmount_.WriteTo(output, _map_resourceAmount_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += resourceAmount_.CalculateSize(_map_resourceAmount_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateRentedResourcesInput other) {
      if (other == null) {
        return;
      }
      resourceAmount_.Add(other.resourceAmount_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            resourceAmount_.AddEntriesFrom(input, _map_resourceAmount_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResourceUsage : pb::IMessage<ResourceUsage> {
    private static readonly pb::MessageParser<ResourceUsage> _parser = new pb::MessageParser<ResourceUsage>(() => new ResourceUsage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResourceUsage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractImplReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceUsage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceUsage(ResourceUsage other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResourceUsage Clone() {
      return new ResourceUsage(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pbc::MapField<string, int>.Codec _map_value_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt32(16, 0), 10);
    private readonly pbc::MapField<string, int> value_ = new pbc::MapField<string, int>();
    /// <summary>
    /// The amount of resource tokens usage, symbol -> amount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResourceUsage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResourceUsage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Value.Equals(other.Value)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _map_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_map_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResourceUsage other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _map_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetVirtualAddressForLockingInput : pb::IMessage<GetVirtualAddressForLockingInput> {
    private static readonly pb::MessageParser<GetVirtualAddressForLockingInput> _parser = new pb::MessageParser<GetVirtualAddressForLockingInput>(() => new GetVirtualAddressForLockingInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetVirtualAddressForLockingInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractImplReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVirtualAddressForLockingInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVirtualAddressForLockingInput(GetVirtualAddressForLockingInput other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      lockId_ = other.lockId_ != null ? other.lockId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVirtualAddressForLockingInput Clone() {
      return new GetVirtualAddressForLockingInput(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Types.Address address_;
    /// <summary>
    /// The address of the lock. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "lock_id" field.</summary>
    public const int LockIdFieldNumber = 2;
    private global::AElf.Types.Hash lockId_;
    /// <summary>
    /// The id of the lock. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Hash LockId {
      get { return lockId_; }
      set {
        lockId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetVirtualAddressForLockingInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetVirtualAddressForLockingInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (!object.Equals(LockId, other.LockId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (lockId_ != null) hash ^= LockId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (lockId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(LockId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (lockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LockId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetVirtualAddressForLockingInput other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.lockId_ != null) {
        if (lockId_ == null) {
          LockId = new global::AElf.Types.Hash();
        }
        LockId.MergeFrom(other.LockId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 18: {
            if (lockId_ == null) {
              LockId = new global::AElf.Types.Hash();
            }
            input.ReadMessage(LockId);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OwningRental : pb::IMessage<OwningRental> {
    private static readonly pb::MessageParser<OwningRental> _parser = new pb::MessageParser<OwningRental>(() => new OwningRental());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OwningRental> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractImplReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwningRental() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwningRental(OwningRental other) : this() {
      resourceAmount_ = other.resourceAmount_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwningRental Clone() {
      return new OwningRental(this);
    }

    /// <summary>Field number for the "resource_amount" field.</summary>
    public const int ResourceAmountFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_resourceAmount_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<string, long> resourceAmount_ = new pbc::MapField<string, long>();
    /// <summary>
    /// The amount of resource tokens owed, symbol -> amount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> ResourceAmount {
      get { return resourceAmount_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OwningRental);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OwningRental other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ResourceAmount.Equals(other.ResourceAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ResourceAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      resourceAmount_.WriteTo(output, _map_resourceAmount_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += resourceAmount_.CalculateSize(_map_resourceAmount_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OwningRental other) {
      if (other == null) {
        return;
      }
      resourceAmount_.Add(other.resourceAmount_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            resourceAmount_.AddEntriesFrom(input, _map_resourceAmount_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OwningRentalUnitValue : pb::IMessage<OwningRentalUnitValue> {
    private static readonly pb::MessageParser<OwningRentalUnitValue> _parser = new pb::MessageParser<OwningRentalUnitValue>(() => new OwningRentalUnitValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OwningRentalUnitValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractImplReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwningRentalUnitValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwningRentalUnitValue(OwningRentalUnitValue other) : this() {
      resourceUnitValue_ = other.resourceUnitValue_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OwningRentalUnitValue Clone() {
      return new OwningRentalUnitValue(this);
    }

    /// <summary>Field number for the "resource_unit_value" field.</summary>
    public const int ResourceUnitValueFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_resourceUnitValue_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<string, long> resourceUnitValue_ = new pbc::MapField<string, long>();
    /// <summary>
    /// Resource unit price, symbol -> unit price.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> ResourceUnitValue {
      get { return resourceUnitValue_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OwningRentalUnitValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OwningRentalUnitValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ResourceUnitValue.Equals(other.ResourceUnitValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ResourceUnitValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      resourceUnitValue_.WriteTo(output, _map_resourceUnitValue_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += resourceUnitValue_.CalculateSize(_map_resourceUnitValue_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OwningRentalUnitValue other) {
      if (other == null) {
        return;
      }
      resourceUnitValue_.Add(other.resourceUnitValue_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            resourceUnitValue_.AddEntriesFrom(input, _map_resourceUnitValue_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferToContractInput : pb::IMessage<TransferToContractInput> {
    private static readonly pb::MessageParser<TransferToContractInput> _parser = new pb::MessageParser<TransferToContractInput>(() => new TransferToContractInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferToContractInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.TokenContractImplReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToContractInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToContractInput(TransferToContractInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferToContractInput Clone() {
      return new TransferToContractInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    /// <summary>
    /// The symbol of token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    /// <summary>
    /// The amount of token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 3;
    private string memo_ = "";
    /// <summary>
    /// The memo.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferToContractInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferToContractInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Memo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferToContractInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 26: {
            Memo = input.ReadString();
            break;
          }
        }
      }
    }

  }
  

  #endregion

}

#endregion Designer generated code
